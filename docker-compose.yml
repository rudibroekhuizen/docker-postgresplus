version: '3.8'

services:
  traefik:
    image: traefik:v2.4
    command: 
      - "--api.insecure=true"
      - "--providers.docker"
      - "--entrypoints.web.address=:80"
    ports:
      - 80:80
#      - 8080:8080
    networks:
      - web
      - backend
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch-oss:7.6.1
    environment:
      - http.host=0.0.0.0
      - transport.host= 127.0.0.1
      - discovery.type=single-node
      - cluster.routing.allocation.disk.threshold_enabled=false
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
    networks:
      - backend
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data

  logstash:
    build: ./logstash
    volumes:
      - ./logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml
      - ./logstash/pipeline:/usr/share/logstash/pipeline
      - pglog:/mnt/data:rw
#    ports:
#      - "5000"
    environment:
      LS_JAVA_OPTS: "-Xmx256m -Xms256m"
    networks:
      - backend
    depends_on:
      - elasticsearch

  kibana:
    image: docker.elastic.co/kibana/kibana-oss:7.6.1
    networks:
      - backend
    labels:
      - "traefik.backend=kibana"
      - "traefik.port=5601"
      - "traefik.http.routers.kibana.rule=Host(`kibana.docker.localhost`)"

  grafana:
    image: grafana/grafana:7.3.2
#    ports:
#      - "3000:3000"
    networks:
      - backend
    volumes:
      - ./grafana/dashboards:/var/lib/grafana/dashboards
      - ./grafana/provisioning:/etc/grafana/provisioning
    environment:
      - GF_INSTALL_PLUGINS=${GRAFANA_INSTALL_PLUGINS}
      - GF_AUTH_DISABLE_LOGIN_FORM=true
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_NAME=Main Org.
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_USERS_ALLOW_SIGN_UP=false
    labels:
      - "traefik.backend=grafana"
      - "traefik.port=5601"
      - "traefik.http.routers.grafana.rule=Host(`grafana.docker.localhost`)"

  postgres:
    shm_size: 256M
    build: ./postgres
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./postgres/docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d
      - ./postgres/conf.d:/conf.d
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - REPLICATION_USER=${REPLICATION_USER}
      - REPLICATION_PASSWORD=${REPLICATION_PASSWORD}
    networks:
      - backend

  psql:
    build: ./psql
    volumes:
      - pglog:/tmp
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_DB=${POSTGRES_DB}
    networks:
      - backend

  pgadmin:
    image: dpage/pgadmin4:4
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_DEFAULT_EMAIL}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_DEFAULT_PASSWORD}
    expose:
      - "80"
    ports:
      - "5050:80"
    networks:
      - backend
    volumes:
      - ./pgadmin:/var/lib/pgadmin/storage/pgadmin_naturalis.nl
    labels:
      - "traefik.backend=pgadmin"
      - "traefik.port=80"
      - "traefik.http.routers.pgadmin.rule=Host(`pgadmin.docker.localhost`)"

  schemaspy_nginx:
    image: nginx:1.13.1-alpine
    volumes:
      - schemaspy_data:/var/www/html:ro
      - ./schemaspy_nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
    expose:
      - "80"
    networks:
      - backend
    command: "nginx -g 'daemon off;'"
    labels:
      - "traefik.backend=schemaspy"
      - "traefik.docker.network=backend"
      - "traefik.port=80"
      - "traefik.http.routers.schemaspy.rule=Host(`schemaspy.docker.localhost`)"

  schemaspy:
    image: schemaspy/schemaspy:snapshot
    volumes:
      - schemaspy_data:/output
#     - ./schemaspy.properties:/schemaspy.properties
    networks:
      - backend
    command: "-t pgsql -host ${POSTGRES_HOST} -port ${POSTGRES_PORT} -db ${POSTGRES_DB} -s ${POSTGRES_SCHEMA} -u ${POSTGRES_USER} -p ${POSTGRES_PASSWORD}"

  sqlpad:
    image: 'sqlpad/sqlpad:latest'
    hostname: 'sqlpad'
    ports:
      - '3030:3000'
    networks:
      - backend
    environment:
      - SQLPAD_DEBUG=TRUE
    volumes:
      - sqlpad:/var/lib/sqlpad

networks:
  web:
    internal: false
  backend:
    internal: false

volumes:
  elasticsearch_data:
  grafana_data:
  pgadmin_data:
  schemaspy_data:
  pglog:
  pgdata:
  pgadmin:
  sqlpad:
